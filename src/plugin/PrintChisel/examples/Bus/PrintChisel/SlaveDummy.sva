`define next_shift_amount 0 //IN CASE OF REQUIRED SIGNALS VALUES IN THE FUTURE, SHIFT YOUR ENTIRE TIMING BY THIS FACTOR

`include "ipc.sva"
`include "SlaveDummy_functions.sva"
`include "types.sva"
import scam_model_types::*;

module SlaveDummy_verification(reset);

input reset;

//DESIGNER SHOULD PAY ATTENTION FOR USING THE MODEL CORRECT NAME TO REFER TO THE CLK SIGNAL USED IN IT
default clocking default_clk @(posedge SlaveDummy.clk); endclocking

// SYNC AND NOTIFY SIGNALS (1-cycle macros) //
function bus_req_sync;
	bus_req_sync = SlaveDummy.io_bus_req_sync;
endfunction
function bus_resp_sync;
	bus_resp_sync = SlaveDummy.io_bus_resp_sync;
endfunction
function bus_req_notify;
	bus_req_notify = SlaveDummy.io_bus_req_notify;
endfunction
function bus_resp_notify;
	bus_resp_notify = SlaveDummy.io_bus_resp_notify;
endfunction

// DP SIGNALS //
function int bus_req_sig_addr;
	bus_req_sig_addr = SlaveDummy.io_bus_req_addr;
endfunction
function int bus_req_sig_data;
	bus_req_sig_data = SlaveDummy.io_bus_req_data;
endfunction
function trans_t bus_req_sig_trans_type;
	bus_req_sig_trans_type = SlaveDummy.io_bus_req_trans_type;
endfunction
function ack_t bus_resp_sig_ack;
	bus_resp_sig_ack = SlaveDummy.io_bus_resp_ack;
endfunction
function int bus_resp_sig_data;
	bus_resp_sig_data = SlaveDummy.io_bus_resp_data;
endfunction


// VISIBLE REGISTERS //
function ack_t resp_ack;
	resp_ack = SlaveDummy.resp_signal_r_ack;
endfunction
function int resp_data;
	resp_data = SlaveDummy.resp_signal_r_data;
endfunction


// STATES //
--macro run_0 : Bool := 1 end macro;
--macro run_1 : Bool := 1 end macro;


// OPERATIONS //
sequence reset_sequence;
//DISGNER REFER TO MODEL RESET SIGNAL HERE
	(SlaveDummy.reset == 1'b1);
endsequence
property reset_p;
	reset_sequence |=>
	t ##0 run_0() and
	t ##0 resp_ack() == err and
	t ##0 resp_data() == 0 and
	t ##0 bus_req_notify() == 1 and
	t ##0 bus_resp_notify() == 0;
endproperty
reset_a: assert property (reset_p);


property run_0_read_0_p(o);
int bus_req_sig_data_0;
// hold //
	t ##0 hold(bus_req_sig_data_0, bus_req_sig_data()) and
// Conceptual State //
	t ##0 run_0() and
// trigger //
	t ##0 bus_req_sync()
implies
	t_end(o) ##0 run_1() and
	t_end(o) ##0 bus_resp_sig_ack() == ok and
	t_end(o) ##0 bus_resp_sig_data() == bus_req_sig_data_0 and
	t_end(o) ##0 resp_ack() == ok and
	t_end(o) ##0 resp_data() == bus_req_sig_data_0 and
	during (next(t,1), t_end(o), bus_req_notify() == 0) and
	during_o (t, 1, t_end(o), -1, bus_resp_notify() == 0) and
	t_end(o) ##0 bus_resp_notify() == 1;
endproperty;
run_0_read_0_a: assert property (disable iff (reset) run_0_read_0_p(1)); //ASSIGN t_end offset here


property run_1_write_1_p(o);
ack_t resp_ack_0;
int resp_data_0;
// hold //
	t ##0 hold(resp_ack_0, resp_ack()) and
	t ##0 hold(resp_data_0, resp_data()) and
// Conceptual State //
	t ##0 run_1() and
// trigger //
	t ##0 bus_resp_sync()
implies
	t_end(o) ##0 run_0() and
	t_end(o) ##0 resp_ack() == resp_ack_0 and
	t_end(o) ##0 resp_data() == resp_data_0 and
	during_o (t, 1, t_end(o), -1, bus_req_notify() == 0) and
	t_end(o) ##0 bus_req_notify() == 1 and
	during (next(t,1), t_end(o), bus_resp_notify() == 0);
endproperty;
run_1_write_1_a: assert property (disable iff (reset) run_1_write_1_p(1)); //ASSIGN t_end offset here


property wait_run_0_p;
ack_t resp_ack_0;
int resp_data_0;
// hold //
	t ##0 hold(resp_ack_0, resp_ack()) and
	t ##0 hold(resp_data_0, resp_data()) and
// Conceptual State //
	t ##0 run_0() and
// trigger //
	t ##0 !(bus_req_sync())
implies
	t ##1 run_0() and
	t ##1 resp_ack() == resp_ack_0 and
	t ##1 resp_data() == resp_data_0 and
	t ##1 bus_req_notify() == 1 and
	t ##1 bus_resp_notify() == 0;
endproperty;
wait_run_0_a: assert property (disable iff (reset) wait_run_0_p); //ASSIGN t_end offset here


property wait_run_1_p;
ack_t resp_ack_0;
int resp_data_0;
// hold //
	t ##0 hold(resp_ack_0, resp_ack()) and
	t ##0 hold(resp_data_0, resp_data()) and
// Conceptual State //
	t ##0 run_1() and
// trigger //
	t ##0 !(bus_resp_sync())
implies
	t ##1 run_1() and
	t ##1 bus_resp_sig_ack() == resp_ack_0 and
	t ##1 bus_resp_sig_data() == resp_data_0 and
	t ##1 resp_ack() == resp_ack_0 and
	t ##1 resp_data() == resp_data_0 and
	t ##1 bus_req_notify() == 0 and
	t ##1 bus_resp_notify() == 1;
endproperty;
wait_run_1_a: assert property (disable iff (reset) wait_run_1_p); //ASSIGN t_end offset here


endmodule

//DESIGNER SHOULD PAY ATTENTION FOR USING THE MODEL CORRECT NAME FOR BINDING AND TO REFER TO THE RESET SIGNAL USED IN IT
bind SlaveDummy SlaveDummy_verification inst (.*, .reset(SlaveDummy.reset));
