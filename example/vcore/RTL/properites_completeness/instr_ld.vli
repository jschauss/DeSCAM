property instr_ld;
disable iff: !reset_n;
dependencies: bounded_wait;

for timepoints:
    t_nostall=t+1..max_wait_dmem waits_for complete dmem_valid_i;

freeze:
  opcode  = field_opcode(IR) @ t,
  dest    = field_A(IR) @ t,
  b       = field_B(IR) @ t,
  imm5    = sign_ext(field_imm5(IR),16) @ t,
  Rb      = virtual_register(b) @ t,
  ea      = unsigned(Rb + imm5)[15:0] @ t,
  data    = dmem_data_i @ t_nostall,
  fetched_instruction = imem_data_i @ t,
  pc      = PC @ t,
  new_pc  = (pc+2)[15:0] @ t;

assume:
// conceptual state
at t:   conceptual_state;

// trigger
at t:   opcode == 5'b00100;

prove:
// conceptual state
at t_nostall:   conceptual_state;

// outputs
dmem_read(ea, data, t+1, t_nostall);
at t: imem_read(new_pc, fetched_instruction);
during [t+1,t_nostall-1]: no_imem_access;

// visible registers
during [t+1,t_nostall-1]: rf_write(dest,virtual_register(dest));
at t_nostall:   rf_write(dest,data);
at t_nostall:   PC == new_pc;
at t_nostall:   IR == fetched_instruction;

right_hook: t_nostall;
end property;
